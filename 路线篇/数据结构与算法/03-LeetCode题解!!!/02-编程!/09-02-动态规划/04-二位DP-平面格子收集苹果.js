/**
 * 平面上有N*M个格子，每个格子中放着一定数量的苹果。
 * 你从左上角的格子开始， 每一步只能向下走或是向右走，每次走到一个格子上就把格子里的苹果收集起来，
 * 这样下去，你最多能收集到多少个苹果。
 *
 * 例如, 输入:
 *
 * {5, 8, 5, 7, 1, 8},
 * {1, 3, 2, 8, 7, 9},
 * {7, 8, 6, 6, 8, 7},
 * {9, 9, 8, 1, 6, 3},
 * {2, 4,10, 2, 6, 2},
 * {5, 5, 2, 1, 8, 8}
 *
 * 输出: 76  参考:  http://www.tuicool.com/articles/IVVvue
 * */

/**
 * 思路分析
 这是一个典型的二维数组DP问题

 基本状态：
 当你到达第x行第y列的格子的时候，收集到的苹果的数量dp[x][y]。

 转移方程：
 由于你只能向右走或者向下走，所以当你到达第x行第y列的格子的时候，
 你可能是从第x-1行第y列或者第x行第y-1列到达该格子的，而我们最后只要收集苹果最多的那一种方案。

 所以：
 dp[x][y] = max( if(x>0) dp[x-1][y] , if(y>0) dp[x][y-1])
 * */

/**
 *
 * @param grid 二维数组,其中每个元素的值代表苹果数量
 * @return Number
 */
var collectApple = function (grid) {

}

var grid = [
    [5, 8, 5, 7, 1, 8],
    [1, 3, 2, 8, 7, 9],
    [7, 8, 6, 6, 8, 7],
    [9, 9, 8, 1, 6, 3],
    [2, 4, 10, 2, 6, 2],
    [5, 5, 2, 1, 8, 8]
];

collectApple(grid);